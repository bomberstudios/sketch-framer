// Sketch Framer draft (ctrl alt command f) YUP

/* Import the variables and complain if they are undefined */
#import 'sketch-framer-config.js'

/*
This is a port to JSTalk of <https://github.com/leighmcculloch/AppSandboxFileAccess>

Here's the original license for AppSandboxFileAccess:

## License

Copyright (c) 2013, Leigh McCulloch All rights reserved.

BSD-2-Clause License: http://opensource.org/licenses/BSD-2-Clause

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

var AppSandboxFileAccessPersist = {
  keyForBookmarkDataForURL: function(url) {
    log("AppSandboxFileAccessPersist.keyForBookmarkDataForURL("+url+")")
    var urlStr = [url absoluteString];
    log("> " + [NSString stringWithFormat:@"bd_%1$@", urlStr])
    return [NSString stringWithFormat:@"bd_%1$@", urlStr];
  },
  bookmarkDataForURL: function(url) {
    log("AppSandboxFileAccessPersist.bookmarkDataForURL('"+ url +"')")
    var defaults = [NSUserDefaults standardUserDefaults];

    // loop through the bookmarks one path at a time down the URL
    var subUrl = url;
    while ([subUrl path].length() > 1) { // give up when only '/' is left in the path
      var key = AppSandboxFileAccessPersist.keyForBookmarkDataForURL(subUrl);
      var bookmark = [defaults dataForKey:key];
      if (bookmark) { // if a bookmark is found, return it
        return bookmark;
      }
      subUrl = [subUrl URLByDeletingLastPathComponent];
    }
    // no bookmarks for the URL, or parent to the URL were found
    return nil;
  },
  setBookmarkData: function(data, url) {
    log("AppSandboxFileAccessPersist.setBookmarkData")
    log("data: " + data)
    log("URL: " + url)
    var defaults = [NSUserDefaults standardUserDefaults];
    var key = AppSandboxFileAccessPersist.keyForBookmarkDataForURL(url);
    [defaults setObject:data forKey:key];
  }
}

var AppSandboxFileAccess = {
  init: function(opts){
    this.message = opts.message || "Please authorize Sketch to write to this folder. You will only need to do this once."
    this.prompt = opts.prompt || "Authorize",
    this.title = opts.title || "Sketch Authorization"
    return this;
  },
  askPermissionForUrl: function(url) {
    log("AppSandboxFileAccess.askPermissionForUrl("+url+")")
    // this url will be the url allowed, it might be a parent url of the url passed in
    var allowedUrl;

    // create delegate that will limit which files in the open panel can be selected, to ensure only a folder
    // or file giving permission to the file requested can be selected
    // AppSandboxFileAccessOpenSavePanelDelegate *openPanelDelegate = [[AppSandboxFileAccessOpenSavePanelDelegate alloc] initWithFileURL:url];

    // check that the url exists, if it doesn't, find the parent path of the url that does exist and ask permission for that
    var fileManager = [NSFileManager defaultManager];
    var path = [url path];
    while (path.length() > 1) { // give up when only '/' is left in the path or if we get to a path that exists
      if ([fileManager fileExistsAtPath:path]) {
        break;
      }
      path = [path stringByDeletingLastPathComponent];
    }
    log("Looks like we have a winner: " + path)
    url = [NSURL fileURLWithPath:path];

    // display the open panel
    var openPanel = [NSOpenPanel openPanel];
    [openPanel setMessage:this.message];
    [openPanel setPrompt:this.prompt];
    [openPanel setTitle:this.title];
    // [openPanel setDelegate:openPanelDelegate];
    [openPanel setCanCreateDirectories:NO];
    [openPanel setCanChooseFiles:YES];
    [openPanel setCanChooseDirectories:YES];
    [openPanel setAllowsMultipleSelection:NO];
    [openPanel setShowsHiddenFiles:NO];
    [openPanel setExtensionHidden:NO];
    [openPanel setDirectoryURL:url];
    [[NSApplication sharedApplication] activateIgnoringOtherApps:YES];
    var openPanelButtonPressed = [openPanel runModal];
    if (openPanelButtonPressed == NSFileHandlingPanelOKButton) {
      allowedUrl = [openPanel URL];
    }
    return allowedUrl;
  },
  persistPermissionPath: function(path) {
    this.persistPermissionURL([NSURL fileURLWithPath:path]);
  },
  persistPermissionURL: function(url) {
    log("AppSandboxFileAccess.persistPermissionURL("+url+")")
    // store the sandbox permissions
    url = [[url URLByStandardizingPath] URLByResolvingSymlinksInPath]
    var bookmarkData = [url bookmarkDataWithOptions:NSURLBookmarkCreationWithSecurityScope
                           includingResourceValuesForKeys:nil
                           relativeToURL:nil
                           error:null];
    if (bookmarkData) {
      AppSandboxFileAccessPersist.setBookmarkData(bookmarkData, url);
    }
  },
  accessFilePath_withBlock_persistPermission: function(path, block, persist) {
    log("AppSandboxFileAccess.accessFilePath_withBlock_persistPermission")
    log("path: " + path)
    return AppSandboxFileAccess.accessFileURL_withBlock_persistPermission([NSURL fileURLWithPath:path], block, persist);
  },
  accessFileURL_withBlock_persistPermission: function(fileUrl, block, persist) {
    log("AppSandboxFileAccess.accessFileURL_withBlock_persistPermission")
    log("fileUrl: " + fileUrl)
    log("block: " + block)
    log("persist: " + persist)
    var allowedUrl = false;
    // standardize the file url and remove any symlinks so that the url we lookup in bookmark data would match a url given by the askPermissionForUrl method
    var fileUrl = [[fileUrl URLByStandardizingPath] URLByResolvingSymlinksInPath];
    // lookup bookmark data for this url, this will automatically load bookmark data for a parent path if we have it
    var bookmarkData = AppSandboxFileAccessPersist.bookmarkDataForURL(fileUrl);

    if (bookmarkData) {
      log("Bookmark data found")
      // resolve the bookmark data into an NSURL object that will allow us to use the file
      var bookmarkDataIsStale;
      allowedUrl = [NSURL URLByResolvingBookmarkData:bookmarkData options:NSURLBookmarkResolutionWithSecurityScope|NSURLBookmarkResolutionWithoutUI relativeToURL:nil bookmarkDataIsStale:bookmarkDataIsStale error:null];
      // if the bookmark data is stale, we'll create new bookmark data further down
      if (bookmarkDataIsStale) {
        bookmarkData = nil;
      }
    } else {
      log("No bookmark data found")
    }

    // if allowed url is nil, we need to ask the user for permission
    if (!allowedUrl) {
      allowedUrl = AppSandboxFileAccess.askPermissionForUrl(fileUrl);
      if (!allowedUrl) {
        // if the user did not give permission, exit out here
        return false;
      }
    }
    // if we have no bookmark data, we need to create it, this may be because our bookmark data was stale, or this is the first time being given permission
    if (persist && !bookmarkData) {
      AppSandboxFileAccess.persistPermissionURL(allowedUrl);
    }
    // execute the block with the file access permissions
    try {
      [allowedUrl startAccessingSecurityScopedResource];
      block();
    } finally {
      [allowedUrl stopAccessingSecurityScopedResource];
    }
    return true;
  }
}
function in_sandbox(){
  var environ = [[NSProcessInfo processInfo] environment];
  return (nil != [environ objectForKey:@"APP_SANDBOX_CONTAINER_ID"]);
}
var sandboxAccess = AppSandboxFileAccess.init({
  message: "Please authorize Sketch to write to this folder. You will only need to do this once per folder.",
  prompt:  "Authorize",
  title: "Sketch Authorization"
})


/* Configuration */
var framerjs_url = "https://raw.github.com/koenbok/Framer/master/build/framer.js";

function should_become_view(layer) {
  return is_group(layer) || [layer name].slice(-1) == '+';
}
function is_group(layer) {
  return [layer isMemberOfClass:[MSLayerGroup class]] || [layer isMemberOfClass:[MSArtboardGroup class]]
}
function should_ignore_layer(layer) {
  return [layer name].slice(-1) == '-';
}
function sanitize_filename(name){
  return name.replace(/(\s|:|\/)/g ,"_").replace(/__/g,"_").replace("*","").replace("+","").replace("&","");
}
function has_art(layer) {
  // return true;
  if(is_group(layer) && !should_flatten_layer(layer)) {
    var has_art = false;

    var sublayers = [layer layers];
    for (var sub=([sublayers length] - 1); sub >= 0; sub--) {
      var sublayer = sublayers[sub];
      if(!should_ignore_layer(sublayer) && !should_become_view(sublayer)) {
        has_art = true;
      }
    }
    return has_art;

  } else {
    return true;
  }
}
function export_layer(layer, depth) {
  log_depth("Exporting <" + [layer name] + ">", depth);
  var filename = images_folder + "/" + sanitize_filename([layer name]) + ".png";

  // copy off-screen
  var copy = [layer duplicate];
  var frame = [copy frame];
  [frame setX:-100000];
  [frame setY:-100000];

  var artnames = "";
  var has_art = false;

  // remove subgroups and only leave shapes
  if(is_group(layer) && !should_flatten_layer(layer)) {
    // log([layer name] + " is a group and i'm trying to extract its shapes")
    var sublayers = [copy layers];
    for (var sub=([sublayers length] - 1); sub >= 0; sub--) {
      var sublayer = sublayers[sub];
      if(!should_ignore_layer(sublayer)) {
        // log("       " + [layer name] + "." + [sublayer name] + " (" + [sublayer className] + ")");
        if(should_become_view(sublayer)) {
          log("     REMOVING " + [sublayer name]);
          [sublayer removeFromParent];
        } else {
          log("     KEEPING " + [sublayer name]);
          artnames += [sublayer name] + ", ";
          has_art = true;
        }
      }

    }
  } else {
    // not a group, single art
    has_art = true;
  }

  if(!has_art) {
    log_depth("Exporting <" + [layer name] + ">, no image", depth);
  } else {
    log_depth("Exporting <" + [layer name] + "> including children art " + artnames, depth);

    // export
    var rect = [copy rectByAccountingForStyleSize:[[copy absoluteRect] rect]],
        slice = [MSSlice sliceWithRect:rect scale:2];

    if (in_sandbox()) {
      sandboxAccess.accessFilePath_withBlock_persistPermission(target_folder, function(){
        [doc saveArtboardOrSlice:slice toFile:filename];
      }, true)
    } else {
      [doc saveArtboardOrSlice:slice toFile:filename];
    }
  }

  // remove it
  [copy removeFromParent];
}
function should_flatten_layer(layer) {
  var name = [layer name];
  if(name.slice(-1) == "*") {
    return true;
  } else {
    return false;
  }
}
function log_depth(message, depth) {
  var padding = "";
  for(var i=0; i<depth; i++) {
    padding = padding + ">"
  }
  log(padding + " " + message);
}
function process_layer(layer,metadata_container,depth) {

  if (should_ignore_layer(layer)) {
    log_depth("Ignoring <" + [layer name] + "> of type <" + [layer className] + ">", depth);
    return;
  }

  if(should_become_view(layer)){
    log_depth("Processing <" + [layer name] + "> of type <" + [layer className] + ">", depth);
    // If layer is a group, do:

    // temporarily show it
    if (![layer isVisible]) {
      [layer setName:[layer name] + "&"]
    }
    [layer setIsVisible:true];

    // - Get layer data
    var layer_data = extract_metadata_from(layer);
    layer_data.children = [];

    // - Export image if layer has no subgroups
    if (!should_flatten_layer(layer) && is_group(layer)) {
      var sublayers = [layer layers];
      // Apparently, Sketch returns child layers in reverse order (back to front),
      // so we'll loop backwards through them:
      for (var sub=([sublayers length] - 1); sub >= 0; sub--) {
        var current = sublayers[sub];
        process_layer(current,layer_data.children,depth+1);
      }
    }
    export_layer(layer, depth);
    metadata_container.push(layer_data);

    if ([layer name].slice(-1) == '&') {
      [layer setIsVisible:false];
      [layer setName:[layer name].slice(0, -1)];
    }
  }
}
function save_file_from_string(filename,the_string) {
  var path = [@"" stringByAppendingString:filename],
      str = [@"" stringByAppendingString:the_string];

  if (in_sandbox()) {
    sandboxAccess.accessFilePath_withBlock_persistPermission(filename, function(){
      [str writeToFile:path atomically:YES encoding:NSUTF8StringEncoding error:null];
    }, true)
  } else {
    [str writeToFile:path atomically:YES encoding:NSUTF8StringEncoding error:null];
  }
}
function get_next_id() {
  return ++id;
}
function mask_bounds(layer) {
  var sublayers = [layer layers];
  for (var sub=([sublayers length] - 1); sub >= 0; sub--) {
    var current = sublayers[sub];
    if([current name].toLowerCase().indexOf('maskframe') != -1) {
      return metadata_for(current);
    }
  }

  return null;
}
function calculate_real_position_for(layer) {

  var gkrect = [GKRect rectWithRect:[layer rectByAccountingForStyleSize:[[layer absoluteRect] rect]]],
      absrect = [layer absoluteRect];

  var rulerDeltaX = [absrect rulerX] - [absrect x],
      rulerDeltaY = [absrect rulerY] - [absrect y],
      GKRectRulerX = [gkrect x] + rulerDeltaX,
      GKRectRulerY = [gkrect y] + rulerDeltaY;

  return {
    x: Math.round(GKRectRulerX),
    y: Math.round(GKRectRulerY)
  }
}
function metadata_for(layer) {
  var frame = [layer frame],
  gkrect = [GKRect rectWithRect:[layer rectByAccountingForStyleSize:[[layer absoluteRect] rect]]],
  absrect = [layer absoluteRect],
  position = calculate_real_position_for(layer),
  x = position.x,
  y = position.y,
  w = [gkrect width],
  h = [gkrect height];  

  return {
    x: x,
    y: y,
    width: w,
    height: h
  }
}
function extract_metadata_from(layer) {
  var layerFrame = metadata_for(layer),
  maskFrame = mask_bounds(layer);
  
  //metadata.id = get_next_id(); // FIXME

  var metadata = {
    name: sanitize_filename([layer name]),
    layerFrame: layerFrame,
    maskFrame: maskFrame
  };

  if(has_art(layer)) {
    metadata.image = {
      path: "images/" + sanitize_filename([layer name]) + ".png",
      frame: layerFrame
    };
    metadata.imageType = "png";
    // TODO: Find out how the modification hash is calculated in Framer.app
    // metadata.modification = new Date();
  }

  // if it was invisible, mark this in the metadata as well
  if ([layer name].slice(-1) == '&') {
    metadata.visible = false
  }

  return metadata;
}

var document_path = [[doc fileURL] path].split([doc displayName])[0],
    document_name = [doc displayName].replace(".sketch",""),
    target_folder = document_path + document_name,
    images_folder = target_folder + "/images",
    framer_folder = target_folder + "/framer",
    file_manager = [NSFileManager defaultManager],
    id = 0
    
function main() {

  log('#################################################################################################################################################');

  // Create folders
  if (in_sandbox()) {
    sandboxAccess.accessFilePath_withBlock_persistPermission(target_folder, function(){
      [file_manager createDirectoryAtPath:target_folder withIntermediateDirectories:true attributes:nil error:nil];
      [file_manager createDirectoryAtPath:images_folder withIntermediateDirectories:true attributes:nil error:nil];
      [file_manager createDirectoryAtPath:framer_folder withIntermediateDirectories:true attributes:nil error:nil];
    }, true)
  } else {
    [file_manager createDirectoryAtPath:target_folder withIntermediateDirectories:true attributes:nil error:nil];
    [file_manager createDirectoryAtPath:images_folder withIntermediateDirectories:true attributes:nil error:nil];
    [file_manager createDirectoryAtPath:framer_folder withIntermediateDirectories:true attributes:nil error:nil];
  }

  // Get all layers in current page
  var all_layers = [[doc currentPage] layers],
      metadata = [];

  for (var i=0; i < [all_layers length]; i++) {
    process_layer(all_layers[i],metadata, 0);
  }

  file_path = framer_folder + "/views." + document_name + ".js";

  var file_contents = "window.FramerPS = window.FramerPS || {};\nwindow.FramerPS['" + document_name +"'] = " + JSON.stringify(metadata,null,2);
  save_file_from_string(file_path,file_contents);

  // Save JS files from templates:
  if(![file_manager fileExistsAtPath:(target_folder + "/index.html")]) {
    save_file_from_string(target_folder + "/index.html",  FramerIndexFileContents.replace("{{ views }}",'<script src="framer/views.' + document_name + '.js"></script>'));
  }
  save_file_from_string(framer_folder + "/framerps.js", FramerPSJSContents);
  if(![file_manager fileExistsAtPath:(target_folder + "/" + FramerScriptFileName)]) {
    save_file_from_string(target_folder + "/" + FramerScriptFileName, FramerScriptFileContents);
  }

  // Get JS files from Github
  var task = [[NSTask alloc] init],
      argsArray = [NSArray arrayWithObjects:"-O", framerjs_url, nil];
  [task setCurrentDirectoryPath:framer_folder];
  [task setLaunchPath:"/usr/bin/curl"];
  [task setArguments:argsArray];
  [task launch];

  // Get library files if one if configured and isn't yet downloaded
  if(FramerLibraryUrl) {    
    if(![file_manager fileExistsAtPath:(framer_folder + "/" + FramerLibraryFileName)]) {
      var task2 = [[NSTask alloc] init],
          argsArray = [NSArray arrayWithObjects:"-O", FramerLibraryUrl, nil];
      [task2 setCurrentDirectoryPath:framer_folder];
      [task2 setLaunchPath:"/usr/bin/curl"];
      [task2 setArguments:argsArray];
      [task2 launch];
    }  
  }
  

  // Open HTML in default browser if it's the first time we're exporting
  if(![file_manager fileExistsAtPath:(target_folder + "/index.html")]) {
    var open_task = [[NSTask alloc] init],
        open_task_args = [NSArray arrayWithObjects:(target_folder), nil];

    [open_task setCurrentDirectoryPath:framer_folder];
    [open_task setLaunchPath:"/usr/bin/open"];
    [open_task setArguments:open_task_args];
    [open_task launch];
  }

  log('#################################################################################################################################################');

  // Display message in toolbar
  [doc showMessage: "Sketch Framer: Project exported to “" + target_folder + "”"];

}

/*

This plugin will export your Sketch document to a Framer project.

This command REQUIRES at least Sketch Version 2.3 (419),
as it uses an API not available in earlier versions

- Every layer group will become an ImageView, backed by the pixel and/or shape layers in that layer group.
- Views are accessible by name under the PSD object (yeah, I know...)
- Framer respects the layer hierarchy, so a sub layer group will become a subview. This way you can define your view structure in Photoshop.
- TODO: Layer groups with vector masks will become views with clipping enabled. You can optionally add "scroll" to the layer group name to make it a ScrollView.
- Layer group names should be unique, if they're not Framer will silently rename them on export.

// TODO: Check for duplicated names in exported files
// TODO: Calculate proper IDs (not sure what they're used for, but hey...)
// TODO: Calculate proper modification hash
// TODO: Embed framer.js on this file, instead of 'curl'ing it from Github

*/

main();
